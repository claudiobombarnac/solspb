// Decompiled by DJ v3.9.9.91 Copyright 2005 Atanas Neshkov  Date: 23.08.2011 13:30:25
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3) 
// Source File Name:   JForexContextImpl.java

package com.dukascopy.api.impl.connect;

import com.dukascopy.api.*;
import com.dukascopy.api.feed.*;
import com.dukascopy.api.impl.*;
import com.dukascopy.charts.data.datacache.JForexPeriod;
import com.dukascopy.charts.main.interfaces.DDSChartsController;
import com.dukascopy.charts.wrapper.DelegatableChartWrapper;
import com.dukascopy.dds2.greed.agent.strategy.notification.IStrategyRateDataNotificationFactory;
import com.dukascopy.dds2.greed.agent.strategy.notification.StrategyRateDataNotificationFactory;
import com.dukascopy.dds2.greed.agent.strategy.notification.candle.IStrategyCandleNotificationManager;
import com.dukascopy.dds2.greed.agent.strategy.notification.pnf.IStrategyPointAndFigureNotificationManager;
import com.dukascopy.dds2.greed.agent.strategy.notification.pr.IStrategyPriceRangeNotificationManager;
import com.dukascopy.dds2.greed.agent.strategy.notification.tickbar.IStrategyTickBarNotificationManager;
import com.dukascopy.dds2.greed.util.*;
import java.io.File;
import java.security.*;
import java.util.*;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;

// Referenced classes of package com.dukascopy.api.impl.connect:
//            StrategyProcessor, JForexTaskManager, JForexEngineImpl

class JForexContextImpl
    implements IContext
{
    private final class StopStrategyPrivilegedAction
        implements PrivilegedExceptionAction
    {

        public Object run()
            throws Exception
        {
            strategyProcessor.getTaskManager().stopStrategy();
            return null;
        }

        final JForexContextImpl this$0;

        private StopStrategyPrivilegedAction()
        {
            this$0 = JForexContextImpl.this;
            super();
        }

    }


    public JForexContextImpl(StrategyProcessor strategyProcessor, JForexEngineImpl forexEngineImpl, History history, IConsole console, DDSChartsController chartsController, IUserInterface userInterface, IStrategies strategiesControl)
    {
        this.strategyProcessor = null;
        this.forexEngineImpl = null;
        this.history = null;
        this.strategyProcessor = strategyProcessor;
        this.forexEngineImpl = forexEngineImpl;
        this.history = history;
        this.console = console;
        filesDir = FilePathManager.getInstance().getFilesForStrategiesDir();
        this.chartsController = chartsController;
        this.userInterface = userInterface;
        this.strategiesControl = strategiesControl;
    }

    public boolean isStopped()
    {
        return strategyProcessor.isStopping();
    }

    public StrategyProcessor getStrategyProcessor()
    {
        return strategyProcessor;
    }

    public IChart getChart(Instrument instrument)
    {
        if(chartsController != null)
        {
            IChart chart = chartsController.getIChartBy(instrument);
            if(chart == null)
                return null;
            else
                return new DelegatableChartWrapper(chart, strategyProcessor.getStrategy().getClass().getName());
        } else
        {
            return null;
        }
    }

    public Set getCharts(Instrument instrument)
    {
        if(chartsController != null)
        {
            Set charts = chartsController.getICharts(instrument);
            if(charts == null)
                return null;
            Set result = new HashSet();
            DelegatableChartWrapper wrapper;
            for(Iterator i$ = charts.iterator(); i$.hasNext(); result.add(wrapper))
            {
                IChart chart = (IChart)i$.next();
                wrapper = new DelegatableChartWrapper(chart, strategyProcessor.getStrategy().getClass().getName());
            }

            return result;
        } else
        {
            return null;
        }
    }

    public IUserInterface getUserInterface()
    {
        return userInterface;
    }

    public IConsole getConsole()
    {
        return console;
    }

    public IEngine getEngine()
    {
        return forexEngineImpl;
    }

    public IHistory getHistory()
    {
        return history;
    }

    public IIndicators getIndicators()
    {
        if(indicators == null)
            indicators = new Indicators(history);
        return indicators;
    }

    public IStrategies getStrategies()
    {
        return strategiesControl;
    }

    public Future executeTask(Callable callable)
    {
        return strategyProcessor.executeTask(callable, false);
    }

    public boolean isFullAccessGranted()
    {
        return strategyProcessor.isFullAccessGranted();
    }

    public void stop()
    {
        try
        {
            AccessController.doPrivileged(new StopStrategyPrivilegedAction());
        }
        catch(PrivilegedActionException e)
        {
            Exception ex = e.getException();
            String error = StrategyWrapper.representError(new Long(strategyProcessor.getStrategyId()), ex);
            NotificationUtilsProvider.getNotificationUtils().postErrorMessage(error, ex, false);
        }
    }

    public File getFilesDir()
    {
        return filesDir;
    }

    public String toString()
    {
        return "JForex context";
    }

    public void pause()
    {
    }

    public void setSubscribedInstruments(Set instruments)
    {
        strategyProcessor.setSubscribedInstruments(instruments);
    }

    public Set getSubscribedInstruments()
    {
        return strategyProcessor.getSubscribedInstruments();
    }

    public IAccount getAccount()
    {
        return strategyProcessor.getAccount();
    }

    public void subscribeToBarsFeed(Instrument instrument, Period period, OfferSide offerSide, IBarFeedListener listener)
    {
        JForexPeriod jForexPeriod = new JForexPeriod(DataType.TIME_PERIOD_AGGREGATION, period);
        StrategyRateDataNotificationFactory.getIsntance().getCandleNotificationManager().subscribeToLiveBarsFeed(strategyProcessor.getStrategy(), instrument, jForexPeriod, offerSide, listener, strategyProcessor.getTaskManager().getExceptionHandler(), strategyProcessor.getTaskManager(), strategyProcessor, NotificationUtilsProvider.getNotificationUtils());
    }

    public void unsubscribeFromBarsFeed(IBarFeedListener listener)
    {
        StrategyRateDataNotificationFactory.getIsntance().getCandleNotificationManager().unsubscribeFromLiveBarsFeed(strategyProcessor.getStrategy(), listener);
    }

    public void subscribeToPointAndFigureFeed(Instrument instrument, OfferSide offerSide, PriceRange priceRange, ReversalAmount reversalAmount, IPointAndFigureFeedListener listener)
    {
        JForexPeriod jForexPeriod = new JForexPeriod(DataType.POINT_AND_FIGURE, Period.TICK, priceRange, reversalAmount);
        StrategyRateDataNotificationFactory.getIsntance().getPointAndFigureNotificationManager().subscribeToLiveBarsFeed(strategyProcessor.getStrategy(), instrument, jForexPeriod, offerSide, listener, strategyProcessor.getTaskManager().getExceptionHandler(), strategyProcessor.getTaskManager(), strategyProcessor, NotificationUtilsProvider.getNotificationUtils());
    }

    public void unsubscribeFromPointAndFigureFeed(IPointAndFigureFeedListener listener)
    {
        StrategyRateDataNotificationFactory.getIsntance().getPointAndFigureNotificationManager().unsubscribeFromLiveBarsFeed(strategyProcessor.getStrategy(), listener);
    }

    public void subscribeToRangeBarFeed(Instrument instrument, OfferSide offerSide, PriceRange priceRange, IRangeBarFeedListener listener)
    {
        JForexPeriod jForexPeriod = new JForexPeriod(DataType.PRICE_RANGE_AGGREGATION, Period.TICK, priceRange);
        StrategyRateDataNotificationFactory.getIsntance().getPriceRangeNotificationManager().subscribeToLiveBarsFeed(strategyProcessor.getStrategy(), instrument, jForexPeriod, offerSide, listener, strategyProcessor.getTaskManager().getExceptionHandler(), strategyProcessor.getTaskManager(), strategyProcessor, NotificationUtilsProvider.getNotificationUtils());
    }

    public void unsubscribeFromRangeBarFeed(IRangeBarFeedListener listener)
    {
        StrategyRateDataNotificationFactory.getIsntance().getPriceRangeNotificationManager().unsubscribeFromLiveBarsFeed(strategyProcessor.getStrategy(), listener);
    }

    public void subscribeToTickBarFeed(Instrument instrument, OfferSide offerSide, TickBarSize tickBarSize, ITickBarFeedListener listener)
    {
        JForexPeriod jForexPeriod = new JForexPeriod(DataType.TICK_BAR, Period.TICK, null, null, tickBarSize);
        StrategyRateDataNotificationFactory.getIsntance().getTickBarNotificationManager().subscribeToLiveBarsFeed(strategyProcessor.getStrategy(), instrument, jForexPeriod, offerSide, listener, strategyProcessor.getTaskManager().getExceptionHandler(), strategyProcessor.getTaskManager(), strategyProcessor, NotificationUtilsProvider.getNotificationUtils());
    }

    public void unsubscribeFromTickBarFeed(ITickBarFeedListener listener)
    {
        StrategyRateDataNotificationFactory.getIsntance().getTickBarNotificationManager().unsubscribeFromLiveBarsFeed(strategyProcessor.getStrategy(), listener);
    }

    private StrategyProcessor strategyProcessor;
    private JForexEngineImpl forexEngineImpl;
    private History history;
    private IConsole console;
    private DDSChartsController chartsController;
    private IUserInterface userInterface;
    private IIndicators indicators;
    private IStrategies strategiesControl;
    private File filesDir;

}