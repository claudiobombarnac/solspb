// Decompiled by DJ v3.9.9.91 Copyright 2005 Atanas Neshkov  Date: 23.08.2011 13:30:26
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3) 
// Source File Name:   ResponseMessageGenerator.java

package com.dukascopy.api.impl.connect;

import com.dukascopy.api.IMessage;
import com.dukascopy.api.IOrder;
import com.dukascopy.transport.common.model.type.NotificationMessageCode;
import java.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// Referenced classes of package com.dukascopy.api.impl.connect:
//            PlatformOrderImpl

public class ResponseMessageGenerator
{
    static final class MessageType extends Enum
    {

        public static MessageType[] values()
        {
            return (MessageType[])$VALUES.clone();
        }

        public static MessageType valueOf(String name)
        {
            return (MessageType)Enum.valueOf(com/dukascopy/api/impl/connect/ResponseMessageGenerator$MessageType, name);
        }

        public static final MessageType OK;
        public static final MessageType REJECT;
        private static final MessageType $VALUES[];

        static 
        {
            OK = new MessageType("OK", 0);
            REJECT = new MessageType("REJECT", 1);
            $VALUES = (new MessageType[] {
                OK, REJECT
            });
        }

        private MessageType(String s, int i)
        {
            super(s, i);
        }
    }


    public ResponseMessageGenerator()
    {
        byServerRequest = new HashMap();
        byMessageType = new HashMap();
        byOrderState = new HashMap();
        byServerRequest.put(PlatformOrderImpl.ServerRequest.NONE, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_SUBMIT_OK, com.dukascopy.api.IMessage.Type.ORDER_CLOSE_OK, com.dukascopy.api.IMessage.Type.ORDER_FILL_OK, com.dukascopy.api.IMessage.Type.ORDERS_MERGE_OK, com.dukascopy.api.IMessage.Type.ORDER_CHANGED_OK
        }));
        byServerRequest.put(PlatformOrderImpl.ServerRequest.SUBMIT, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_SUBMIT_OK, com.dukascopy.api.IMessage.Type.ORDER_SUBMIT_REJECTED, com.dukascopy.api.IMessage.Type.ORDER_FILL_REJECTED, com.dukascopy.api.IMessage.Type.ORDER_FILL_OK
        }));
        byServerRequest.put(PlatformOrderImpl.ServerRequest.SET_REQ_AMOUNT, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_CHANGED_OK, com.dukascopy.api.IMessage.Type.ORDER_CHANGED_REJECTED
        }));
        byServerRequest.put(PlatformOrderImpl.ServerRequest.SET_OPEN_PRICE, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_CHANGED_OK, com.dukascopy.api.IMessage.Type.ORDER_CHANGED_REJECTED
        }));
        byServerRequest.put(PlatformOrderImpl.ServerRequest.CLOSE, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_CLOSE_OK, com.dukascopy.api.IMessage.Type.ORDER_CLOSE_REJECTED
        }));
        byServerRequest.put(PlatformOrderImpl.ServerRequest.SET_EXPIRATION, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_CHANGED_OK, com.dukascopy.api.IMessage.Type.ORDER_CHANGED_REJECTED
        }));
        byServerRequest.put(PlatformOrderImpl.ServerRequest.SET_SL, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_CHANGED_OK, com.dukascopy.api.IMessage.Type.ORDER_CHANGED_REJECTED
        }));
        byServerRequest.put(PlatformOrderImpl.ServerRequest.SET_TP, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_CHANGED_OK, com.dukascopy.api.IMessage.Type.ORDER_CHANGED_REJECTED
        }));
        byServerRequest.put(PlatformOrderImpl.ServerRequest.MERGE_SOURCE, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_CLOSE_OK, com.dukascopy.api.IMessage.Type.ORDER_CLOSE_REJECTED
        }));
        byServerRequest.put(PlatformOrderImpl.ServerRequest.MERGE_TARGET, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDERS_MERGE_OK, com.dukascopy.api.IMessage.Type.ORDERS_MERGE_REJECTED, com.dukascopy.api.IMessage.Type.ORDER_CLOSE_OK
        }));
        byServerRequest.put(PlatformOrderImpl.ServerRequest.CANCEL_ORDER, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_CLOSE_OK, com.dukascopy.api.IMessage.Type.ORDER_CLOSE_REJECTED
        }));
        byOrderState.put(com.dukascopy.api.IOrder.State.CREATED, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_SUBMIT_OK, com.dukascopy.api.IMessage.Type.ORDER_SUBMIT_REJECTED, com.dukascopy.api.IMessage.Type.ORDERS_MERGE_OK, com.dukascopy.api.IMessage.Type.ORDERS_MERGE_REJECTED
        }));
        byOrderState.put(com.dukascopy.api.IOrder.State.OPENED, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_FILL_OK, com.dukascopy.api.IMessage.Type.ORDER_FILL_REJECTED, com.dukascopy.api.IMessage.Type.ORDER_CLOSE_OK, com.dukascopy.api.IMessage.Type.ORDER_CLOSE_REJECTED, com.dukascopy.api.IMessage.Type.ORDER_CHANGED_OK, com.dukascopy.api.IMessage.Type.ORDER_CHANGED_REJECTED
        }));
        byOrderState.put(com.dukascopy.api.IOrder.State.FILLED, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_CLOSE_OK, com.dukascopy.api.IMessage.Type.ORDER_CLOSE_REJECTED, com.dukascopy.api.IMessage.Type.ORDER_CHANGED_OK, com.dukascopy.api.IMessage.Type.ORDER_CHANGED_REJECTED, com.dukascopy.api.IMessage.Type.ORDERS_MERGE_REJECTED, com.dukascopy.api.IMessage.Type.ORDERS_MERGE_OK
        }));
        byOrderState.put(com.dukascopy.api.IOrder.State.CLOSED, asSet(new com.dukascopy.api.IMessage.Type[0]));
        byOrderState.put(com.dukascopy.api.IOrder.State.CANCELED, asSet(new com.dukascopy.api.IMessage.Type[0]));
        byMessageType.put(MessageType.OK, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_SUBMIT_OK, com.dukascopy.api.IMessage.Type.ORDER_CHANGED_OK, com.dukascopy.api.IMessage.Type.ORDER_CLOSE_OK, com.dukascopy.api.IMessage.Type.ORDER_FILL_OK, com.dukascopy.api.IMessage.Type.ORDERS_MERGE_OK
        }));
        byMessageType.put(MessageType.REJECT, asSet(new com.dukascopy.api.IMessage.Type[] {
            com.dukascopy.api.IMessage.Type.ORDER_SUBMIT_REJECTED, com.dukascopy.api.IMessage.Type.ORDER_CHANGED_REJECTED, com.dukascopy.api.IMessage.Type.ORDER_CLOSE_REJECTED, com.dukascopy.api.IMessage.Type.ORDER_FILL_REJECTED, com.dukascopy.api.IMessage.Type.ORDERS_MERGE_REJECTED
        }));
    }

    private transient Set asSet(com.dukascopy.api.IMessage.Type types[])
    {
        return new HashSet(Arrays.asList(types));
    }

    public com.dukascopy.api.IMessage.Type generateResponse(PlatformOrderImpl.ServerRequest lastServerRequest, com.dukascopy.api.IOrder.State state, NotificationMessageCode code, String text)
    {
        com.dukascopy.api.IMessage.Type rc = null;
        static class _cls1
        {

            static final int $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[];

            static 
            {
                $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode = new int[NotificationMessageCode.values().length];
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ACCOUNT_BLOCKED.ordinal()] = 1;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ACCOUNT_DISABLED.ordinal()] = 2;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.AMOUNT_EMPTY_OR_ZERO.ordinal()] = 3;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.AMOUNT_GREATER_REMAINING.ordinal()] = 4;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.AMOUNT_TO_LARGE.ordinal()] = 5;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.FAILED_CANCEL_OFFER.ordinal()] = 6;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.FAILED_EDIT_OFFER.ordinal()] = 7;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.GROUP_MISSED.ordinal()] = 8;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.INSTRUMENT_EMPTY.ordinal()] = 9;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.INVALID_ORDER.ordinal()] = 10;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.MAS_CLOSE_FAIL_BAD_ORDER.ordinal()] = 11;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.MAX_SUBMIT_COUNT_REACHED.ordinal()] = 12;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ORDER_ALREADY_FILLED.ordinal()] = 13;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.PRICE_CLIENT_EMPTY.ordinal()] = 14;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.PRICE_STOP_INVALID.ordinal()] = 15;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.NO_ORDER_FOUND.ordinal()] = 16;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ORDER_IN_ERROR_STATE.ordinal()] = 17;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ORDER_IN_EXEC_STATE.ordinal()] = 18;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ORDER_NOT_FOUND.ordinal()] = 19;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ORDER_SIDE_EMPTY.ordinal()] = 20;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ORDER_STATE_EMPTY.ordinal()] = 21;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ORDER_DIRECTION_EMPTY.ordinal()] = 22;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.REJECT_INVALID_ORDER.ordinal()] = 23;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.REJECT_NO_MARGIN.ordinal()] = 24;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.REJECTED_COUNTERPARTY.ordinal()] = 25;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.REJECTED_MIN_OPEN_AMOUNT.ordinal()] = 26;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.SL_TP_DISABLED_NONHADGE.ordinal()] = 27;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.STEP_LESS_3PIP.ordinal()] = 28;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.SYSTEM_UNAVAILABLE.ordinal()] = 29;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.UNSUFF_MARGIN_ON_CLOSE.ordinal()] = 30;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.UPDATE_ORDER_NOT_FOUND.ordinal()] = 31;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.VALIDATION_ERROR.ordinal()] = 32;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.POSITION_MERGE_FAILED.ordinal()] = 33;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.CANCELING_OFFER_MC.ordinal()] = 34;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.EQUITY_LIMIT_REACHED.ordinal()] = 35;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ACCOUNT_BLOCKED_CLOSED.ordinal()] = 36;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ACCOUNT_SETTING_SAVE_FAIL.ordinal()] = 37;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ACCOUNT_STATUS_DISABLED.ordinal()] = 38;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.MC_MARGIN_CUT.ordinal()] = 39;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.MC_MARGIN_CUT_WEEKEND.ordinal()] = 40;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.MERGE_IN_PROGRESS.ordinal()] = 41;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.OCO_GROUPED.ordinal()] = 42;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.OCO_UNGROUPED.ordinal()] = 43;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.REJECT_AND_RESUBMIT.ordinal()] = 44;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.OFFER_CANCELED.ordinal()] = 45;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.OFFER_CANCELED_FILLED.ordinal()] = 46;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.OFFER_CANCELED_LEVERAGE.ordinal()] = 47;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ORDER_CANCELED.ordinal()] = 48;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ORDER_FILLED.ordinal()] = 49;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.ORDER_FILLED_PARTIALLY.ordinal()] = 50;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.POSITION_MERGED_CLOSED.ordinal()] = 51;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.POSITION_MERGED_TO.ordinal()] = 52;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.STRING_MESSAGE.ordinal()] = 53;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$transport$common$model$type$NotificationMessageCode[NotificationMessageCode.UNSUFFICIENT_MARGIN.ordinal()] = 54;
                }
                catch(NoSuchFieldError ex) { }
            }
        }

        switch(_cls1..SwitchMap.com.dukascopy.transport.common.model.type.NotificationMessageCode[code.ordinal()])
        {
        case 1: // '\001'
        case 2: // '\002'
        case 3: // '\003'
        case 4: // '\004'
        case 5: // '\005'
        case 6: // '\006'
        case 7: // '\007'
        case 8: // '\b'
        case 9: // '\t'
        case 10: // '\n'
        case 11: // '\013'
        case 12: // '\f'
        case 13: // '\r'
        case 14: // '\016'
        case 15: // '\017'
        case 16: // '\020'
        case 17: // '\021'
        case 18: // '\022'
        case 19: // '\023'
        case 20: // '\024'
        case 21: // '\025'
        case 22: // '\026'
        case 23: // '\027'
        case 24: // '\030'
        case 25: // '\031'
        case 26: // '\032'
        case 27: // '\033'
        case 28: // '\034'
        case 29: // '\035'
        case 30: // '\036'
        case 31: // '\037'
        case 32: // ' '
        case 33: // '!'
            rc = retain(MessageType.REJECT, lastServerRequest, state, code, text);
            break;

        case 34: // '"'
        case 35: // '#'
        case 36: // '$'
        case 37: // '%'
        case 38: // '&'
        case 39: // '\''
        case 40: // '('
        case 41: // ')'
        case 42: // '*'
        case 43: // '+'
        case 44: // ','
        case 45: // '-'
        case 46: // '.'
        case 47: // '/'
        case 48: // '0'
        case 49: // '1'
        case 50: // '2'
        case 51: // '3'
        case 52: // '4'
        case 53: // '5'
        case 54: // '6'
            rc = com.dukascopy.api.IMessage.Type.NOTIFICATION;
            break;

        default:
            assertion(text, state, lastServerRequest, code);
            break;
        }
        return rc;
    }

    private com.dukascopy.api.IMessage.Type retain(MessageType messageType, PlatformOrderImpl.ServerRequest lastServerRequest, com.dukascopy.api.IOrder.State state, NotificationMessageCode code, String text)
    {
        com.dukascopy.api.IMessage.Type rc = null;
        List rcList = new ArrayList((Collection)byMessageType.get(messageType));
        rcList.retainAll((Collection)byServerRequest.get(lastServerRequest));
        rcList.retainAll((Collection)byOrderState.get(state));
        if(rcList.size() == 1)
            rc = (com.dukascopy.api.IMessage.Type)rcList.get(0);
        else
        if(lastServerRequest != PlatformOrderImpl.ServerRequest.NONE || messageType != MessageType.REJECT)
            assertion(text, state, lastServerRequest, code);
        return rc;
    }

    private void assertion(String msg, com.dukascopy.api.IOrder.State state, PlatformOrderImpl.ServerRequest lastServerRequest, NotificationMessageCode code)
    {
        LOGGER.error(msg);
        LOGGER.error((new StringBuilder()).append("STATES[").append(state).append("][").append(lastServerRequest).append("][").append(code).append("]").toString());
        LOGGER.error("----");
    }

    private static final Logger LOGGER = LoggerFactory.getLogger(com/dukascopy/api/impl/connect/ResponseMessageGenerator);
    Map byServerRequest;
    Map byMessageType;
    Map byOrderState;

}