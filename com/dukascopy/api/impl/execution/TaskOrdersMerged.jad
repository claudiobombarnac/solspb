// Decompiled by DJ v3.9.9.91 Copyright 2005 Atanas Neshkov  Date: 23.08.2011 13:30:27
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3) 
// Source File Name:   TaskOrdersMerged.java

package com.dukascopy.api.impl.execution;

import com.dukascopy.api.IMessage;
import com.dukascopy.api.IStrategy;
import com.dukascopy.api.impl.StrategyWrapper;
import com.dukascopy.api.impl.connect.*;
import com.dukascopy.api.system.IStrategyExceptionHandler;
import com.dukascopy.dds2.greed.util.INotificationUtils;
import com.dukascopy.dds2.greed.util.NotificationUtilsProvider;
import com.dukascopy.transport.common.msg.request.MergePositionsMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// Referenced classes of package com.dukascopy.api.impl.execution:
//            Task

public class TaskOrdersMerged
    implements Task
{

    public TaskOrdersMerged(JForexTaskManager taskManager, IStrategy strategy, MergePositionsMessage mergePositionsMessage)
    {
        this.strategy = strategy;
        this.mergePositionsMessage = mergePositionsMessage;
        this.taskManager = taskManager;
    }

    public Task.Type getType()
    {
        return Task.Type.MESSAGE;
    }

    public Object call()
        throws Exception
    {
        if(taskManager.isStrategyStopping())
            return null;
        if(LOGGER.isDebugEnabled())
            LOGGER.debug((new StringBuilder()).append("Starting processing of merge message [").append(mergePositionsMessage).append("]").toString());
        try
        {
            OrdersInternalCollection ordersInternalCollection = taskManager.getOrdersInternalCollection();
            PlatformOrderImpl platformOrderImpl = ordersInternalCollection.getOrderById(mergePositionsMessage.getNewOrderGroupId());
            if(platformOrderImpl == null)
            {
                String label = mergePositionsMessage.getExternalSysId();
                platformOrderImpl = ordersInternalCollection.getOrderByLabel(label);
            }
            IMessage platformMessageImpl = null;
            if(platformOrderImpl != null)
                platformMessageImpl = platformOrderImpl.update(mergePositionsMessage);
            if(platformMessageImpl != null)
                strategy.onMessage(platformMessageImpl);
        }
        catch(Throwable t)
        {
            String msg = StrategyWrapper.representError(strategy, t);
            NotificationUtilsProvider.getNotificationUtils().postErrorMessage(msg, t, false);
            LOGGER.error(t.getMessage(), t);
            taskManager.getExceptionHandler().onException(taskManager.getStrategyId(), com.dukascopy.api.system.IStrategyExceptionHandler.Source.ON_MESSAGE, t);
        }
        return null;
    }

    private static final Logger LOGGER = LoggerFactory.getLogger(com/dukascopy/api/impl/execution/TaskOrdersMerged);
    private IStrategy strategy;
    private MergePositionsMessage mergePositionsMessage;
    private JForexTaskManager taskManager;

}