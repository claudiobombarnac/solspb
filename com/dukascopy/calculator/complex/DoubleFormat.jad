// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DoubleFormat.java

package com.dukascopy.calculator.complex;

import com.dukascopy.calculator.*;
import java.io.PrintStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DoubleFormat
{
    public class HTMLStringRepresentation
    {

        public boolean isOne()
        {
            if(string.size() != 1)
                return false;
            if(((Vector)string.firstElement()).size() != 1)
                return false;
            return ((Vector)string.firstElement()).elementAt(0) == "1";
        }

        public boolean isMinusOne()
        {
            if(string.size() != 1)
                return false;
            if(((Vector)string.firstElement()).size() != 2)
                return false;
            if(((Vector)string.firstElement()).elementAt(0) != DoubleFormat.minus.elementAt(0))
                return false;
            return ((Vector)string.firstElement()).elementAt(1) == "1";
        }

        public final StringArray string;
        public final int length;
        final DoubleFormat this$0;

        private HTMLStringRepresentation(StringArray string, int length)
        {
            this$0 = DoubleFormat.this;
            super();
            this.string = string;
            this.length = length;
        }

        public HTMLStringRepresentation()
        {
            this$0 = DoubleFormat.this;
            super();
            if(Double.isNaN(number))
            {
                String nan[] = {
                    "N", "a", "N"
                };
                string = new StringArray();
                string.add(nan);
                length = 3;
            } else
            if(Double.isInfinite(number))
            {
                string = new StringArray();
                if(number < 0.0D)
                {
                    string.add(DoubleFormat.minusInfinity);
                    length = 2;
                } else
                {
                    string.add(DoubleFormat.infinity);
                    length = 1;
                }
            } else
            {
                HTMLStringRepresentation h;
                if(notation.standard())
                    h = standard();
                else
                    h = scientific();
                string = h.string;
                length = h.length;
            }
        }

    }


    public DoubleFormat(double number, Base base)
    {
        this.number = number;
        this.base = base;
        notation = new Notation();
        setPrecision(maxPrecision());
    }

    public void setPrecision(int precision)
    {
        if(precision == this.precision)
            return;
        this.precision = precision;
        reset();
        if(digits.size() <= precision)
            return;
        int lastDigit = ((Integer)digits.get(precision)).intValue();
        digits.setSize(precision);
        if(lastDigit < midDigit(base))
        {
            for(; digits.size() > 0 && ((Integer)digits.lastElement()).intValue() == 0; digits.setSize(digits.size() - 1));
            return;
        }
        if(roundUp())
        {
            return;
        } else
        {
            exponent++;
            return;
        }
    }

    public void setBase(Base base)
    {
        this.base = base;
    }

    public void setNotation(Notation notation)
    {
        this.notation = notation;
    }

    private boolean roundUp()
    {
        int position = digits.size() - 1;
        if(position == -1)
        {
            digits.add(Integer.valueOf(1));
            return false;
        }
        int digit = ((Integer)digits.get(position)).intValue();
        if(++digit == baseInt(base))
        {
            digits.remove(position);
            return roundUp();
        } else
        {
            digits.set(position, Integer.valueOf(digit));
            return true;
        }
    }

    public HTMLStringRepresentation representation()
    {
        return new HTMLStringRepresentation();
    }

    private HTMLStringRepresentation standard()
    {
        Vector stringBuffer = new Vector();
        int length = 0;
        if(number < 0.0D)
        {
            stringBuffer.addAll(minus);
            length++;
        }
        if(exponent < 0L)
        {
            stringBuffer.add("0");
            length++;
            stringBuffer.addAll(basePoint);
            length++;
            for(int i = 0; (long)i < -exponent - 1L; i++)
            {
                stringBuffer.add("0");
                length++;
            }

            for(int i = 0; i < digits.size(); i++)
            {
                stringBuffer.add(Character.toString(getDigit(((Integer)digits.elementAt(i)).intValue())));
                length++;
            }

        } else
        {
            for(int i = 0; (long)i < StrictMath.max(exponent + 1L, digits.size()) && (long)i < StrictMath.max(exponent + 1L, digits.size()); i++)
            {
                if((long)i == exponent + 1L)
                {
                    stringBuffer.addAll(basePoint);
                    length++;
                }
                if(i < digits.size())
                    stringBuffer.add(Character.toString(getDigit(((Integer)digits.elementAt(i)).intValue())));
                else
                    stringBuffer.add("0");
                length++;
            }

        }
        StringArray t = new StringArray();
        t.add(stringBuffer);
        return new HTMLStringRepresentation(t, length);
    }

    public HTMLStringRepresentation scientific()
    {
        Vector stringBuffer = new Vector();
        int length = 0;
        if(number < 0.0D)
        {
            stringBuffer.addAll(minus);
            length++;
        }
        boolean first = digits.size() > 1;
        Iterator i$ = digits.iterator();
        do
        {
            if(!i$.hasNext())
                break;
            Integer i = (Integer)i$.next();
            stringBuffer.add(Character.toString(getDigit(i.intValue())));
            length++;
            if(first)
            {
                stringBuffer.addAll(basePoint);
                length++;
                first = false;
            }
        } while(true);
        stringBuffer.add(getEString());
        length += getEStringLength();
        int e = (int)exponent;
        String q = new String("<sup>");
        if(exponent < 0L)
        {
            q = q.concat((String)minus.firstElement());
            stringBuffer.add(q);
            length++;
            e = -e;
        }
        String s = null;
        static class _cls1
        {

            static final int $SwitchMap$com$dukascopy$calculator$Base[];

            static 
            {
                $SwitchMap$com$dukascopy$calculator$Base = new int[Base.values().length];
                try
                {
                    $SwitchMap$com$dukascopy$calculator$Base[Base.OCTAL.ordinal()] = 1;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$calculator$Base[Base.HEXADECIMAL.ordinal()] = 2;
                }
                catch(NoSuchFieldError ex) { }
                try
                {
                    $SwitchMap$com$dukascopy$calculator$Base[Base.BINARY.ordinal()] = 3;
                }
                catch(NoSuchFieldError ex) { }
            }
        }

        switch(_cls1..SwitchMap.com.dukascopy.calculator.Base[base.ordinal()])
        {
        case 1: // '\001'
            s = Integer.toOctalString(e);
            break;

        case 2: // '\002'
            s = Integer.toHexString(e).toUpperCase();
            break;

        default:
            s = Integer.toString(e);
            break;
        }
        for(int i = 0; i < s.length(); i++)
        {
            String t = Character.toString(s.charAt(i));
            if(exponent >= 0L)
                t = q.concat(t);
            if(i == s.length() - 1)
                t = t.concat("</sup>");
            stringBuffer.add(s);
        }

        length += s.length();
        StringArray t = new StringArray();
        t.add(stringBuffer);
        return new HTMLStringRepresentation(t, length, null);
    }

    private void reset()
    {
        digits = new Vector();
        if(number == 0.0D)
        {
            digits.add(Integer.valueOf(0));
            exponent = 0L;
            return;
        }
        if(Double.isInfinite(number) || Double.isNaN(number))
            return;
        switch(_cls1..SwitchMap.com.dukascopy.calculator.Base[base.ordinal()])
        {
        case 3: // '\003'
            setupBin();
            break;

        case 1: // '\001'
            setupOct();
            break;

        case 2: // '\002'
            setupHex();
            break;

        default:
            setupDec();
            break;
        }
        if(StrictMath.abs(number) < 1.0D)
            exponent = -exponent;
    }

    private void setupDec()
    {
        BigDecimal b = new BigDecimal(number >= 0.0D ? number : -number);
        exponent = b.precision() - b.scale() - 1;
        int exponentSign = (int)StrictMath.signum(exponent);
        if(exponentSign < 0)
            exponent = -1L * exponent;
        String s = b.unscaledValue().toString();
        char arr$[] = s.toCharArray();
        int len$ = arr$.length;
        for(int i$ = 0; i$ < len$; i$++)
        {
            Character c = Character.valueOf(arr$[i$]);
            digits.add(Integer.valueOf(getInt(c.charValue())));
        }

        for(; digits.size() > 0 && ((Integer)digits.lastElement()).intValue() == 0; digits.setSize(digits.size() - 1));
    }

    private void setupHex()
    {
        long bits = Double.doubleToRawLongBits(number);
        exponent = (bits & 0x7ff0000000000000L) >>> 52;
        long significand = bits & 0xfffffffffffffL;
        exponent -= 1023L;
        boolean denormalised = exponent == -1023L;
        int exponentSign = (int)StrictMath.signum(exponent);
        if(exponentSign == -1)
            exponent = -exponent;
        if(!denormalised)
        {
            significand |= 0x10000000000000L;
        } else
        {
            significand <<= 1;
            if(significand != 0L)
                for(; (significand & 0x8000000000000L) == 0L; significand <<= 1)
                    exponent++;

        }
        while(exponent % 4L != 0L) 
        {
            significand <<= 1;
            if(exponentSign == -1)
                exponent++;
            else
                exponent--;
        }
        exponent >>>= 2;
        for(int i = 0; i < 14; i++)
        {
            int digit = (int)(significand & 15L);
            digits.add(0, Integer.valueOf(digit));
            significand >>>= 4;
        }

    }

    private void setupOct()
    {
        long bits = Double.doubleToRawLongBits(number);
        exponent = (bits & 0x7ff0000000000000L) >>> 52;
        long significand = bits & 0xfffffffffffffL;
        exponent -= 1023L;
        boolean denormalised = exponent == -1023L;
        int exponentSign = (int)StrictMath.signum(exponent);
        if(exponentSign == -1)
            exponent = -exponent;
        if(!denormalised)
        {
            significand |= 0x10000000000000L;
        } else
        {
            significand <<= 1;
            if(significand != 0L)
                for(; (significand & 0x8000000000000L) == 0L; significand <<= 1)
                    exponent++;

        }
        while(exponent % 3L != 0L) 
        {
            significand <<= 1;
            if(exponentSign == -1)
                exponent++;
            else
                exponent--;
        }
        exponent /= 3L;
        significand <<= 2;
        for(int i = 0; i < 19; i++)
        {
            int digit = (int)(significand & 7L);
            digits.add(0, Integer.valueOf(digit));
            significand >>>= 3;
        }

    }

    private void setupBin()
    {
        long bits = Double.doubleToRawLongBits(number);
        exponent = (bits & 0x7ff0000000000000L) >>> 52;
        long significand = bits & 0xfffffffffffffL;
        exponent -= 1023L;
        boolean denormalised = exponent == -1023L;
        int exponentSign = (int)StrictMath.signum(exponent);
        if(exponentSign == -1)
            exponent = -exponent;
        if(!denormalised)
        {
            significand |= 0x10000000000000L;
        } else
        {
            significand <<= 1;
            if(significand != 0L)
                for(; (significand & 0x8000000000000L) == 0L; significand <<= 1)
                    exponent++;

        }
        for(int i = 0; i < 53; i++)
        {
            int digit = (int)(significand & 1L);
            digits.add(0, Integer.valueOf(digit));
            significand >>>= 1;
        }

    }

    public double getNumber()
    {
        return number;
    }

    public double getAbsNumber()
    {
        return StrictMath.abs(number);
    }

    private static char getDigit(int d)
    {
        switch(d)
        {
        case 0: // '\0'
            return '0';

        case 1: // '\001'
            return '1';

        case 2: // '\002'
            return '2';

        case 3: // '\003'
            return '3';

        case 4: // '\004'
            return '4';

        case 5: // '\005'
            return '5';

        case 6: // '\006'
            return '6';

        case 7: // '\007'
            return '7';

        case 8: // '\b'
            return '8';

        case 9: // '\t'
            return '9';

        case 10: // '\n'
            return 'A';

        case 11: // '\013'
            return 'B';

        case 12: // '\f'
            return 'C';

        case 13: // '\r'
            return 'D';

        case 14: // '\016'
            return 'E';

        case 15: // '\017'
            return 'F';
        }
        return '?';
    }

    private static int getInt(char c)
    {
        switch(c)
        {
        case 48: // '0'
            return 0;

        case 49: // '1'
            return 1;

        case 50: // '2'
            return 2;

        case 51: // '3'
            return 3;

        case 52: // '4'
            return 4;

        case 53: // '5'
            return 5;

        case 54: // '6'
            return 6;

        case 55: // '7'
            return 7;

        case 56: // '8'
            return 8;

        case 57: // '9'
            return 9;
        }
        return -1;
    }

    public static int midDigit(Base base)
    {
        switch(_cls1..SwitchMap.com.dukascopy.calculator.Base[base.ordinal()])
        {
        case 3: // '\003'
            return 1;

        case 1: // '\001'
            return 4;

        case 2: // '\002'
            return 8;
        }
        return 5;
    }

    public static int baseInt(Base base)
    {
        switch(_cls1..SwitchMap.com.dukascopy.calculator.Base[base.ordinal()])
        {
        case 3: // '\003'
            return 2;

        case 1: // '\001'
            return 8;

        case 2: // '\002'
            return 16;
        }
        return 10;
    }

    private int maxPrecision()
    {
        switch(_cls1..SwitchMap.com.dukascopy.calculator.Base[base.ordinal()])
        {
        case 3: // '\003'
            return 52;

        case 1: // '\001'
            return 17;

        case 2: // '\002'
            return 13;
        }
        return 14;
    }

    public String getEString()
    {
        switch(_cls1..SwitchMap.com.dukascopy.calculator.Base[base.ordinal()])
        {
        case 3: // '\003'
            return "";

        case 1: // '\001'
            return "";

        case 2: // '\002'
            return "";
        }
        return "";
    }

    public int getEStringLength()
    {
        switch(_cls1..SwitchMap.com.dukascopy.calculator.Base[base.ordinal()])
        {
        case 3: // '\003'
            return 0;

        case 1: // '\001'
            return 0;

        case 2: // '\002'
            return 0;
        }
        return 0;
    }

    public static void main(String args[])
    {
        DoubleFormat d = new DoubleFormat(-4.2035492222884317E-246D, Base.DECIMAL);
        Notation n = new Notation();
        n.setScientific();
        d.setNotation(n);
        HTMLStringRepresentation s = d.representation();
        LOGGER.debug((new StringBuilder()).append(s.string).append(" (length = ").toString());
        LOGGER.debug(String.valueOf(s.length));
        System.out.println(")");
        for(int p = 14; p > 0; p--)
        {
            LOGGER.debug(String.valueOf(p));
            LOGGER.debug(": ");
            LOGGER.debug(String.valueOf(p));
            s = d.representation();
            LOGGER.debug((new StringBuilder()).append(s.string).append(" (length = ").toString());
            LOGGER.debug(String.valueOf(s.length));
            System.out.println(")");
        }

    }

    private static final Logger LOGGER = LoggerFactory.getLogger(com/dukascopy/calculator/complex/DoubleFormat);
    private final double number;
    private Base base;
    private Notation notation;
    private int precision;
    private Vector digits;
    private long exponent;
    public static final long BIAS = 1023L;
    public static final long E_MAX = 1023L;
    public static final long E_MIN = -1022L;
    public static final Vector basePoint = new Vector(Arrays.asList(new String[] {
        "."
    }));
    public static final String startExponent = "<sup>";
    public static final String endExponent = "</sup>";
    public static final Vector minus = new Vector(Arrays.asList(new String[] {
        "&#8722;"
    }));
    public static final Vector NaN = new Vector(Arrays.asList(new String[] {
        "N", "a", "N"
    }));
    public static final Vector infinity = new Vector(Arrays.asList(new String[] {
        "&#8734;"
    }));
    public static final Vector minusInfinity = new Vector(Arrays.asList(new String[] {
        "&#8722;", "&#8734;"
    }));
    public static final String startHTML = "<html>";
    public static final String endHTML = "</html>";
    public static final Vector imPrefix = new Vector(Arrays.asList(new String[] {
        "i"
    }));
    public static final Vector argumentPrefix = new Vector(Arrays.asList(new String[] {
        "e"
    }));
    public static final Vector plus = new Vector(Arrays.asList(new String[] {
        "+"
    }));
    public final HTMLStringRepresentation NullRepresentation = new HTMLStringRepresentation(new StringArray(), 0, null);




}
