// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LoadInCacheAction.java

package com.dukascopy.charts.data.datacache;

import com.dukascopy.api.*;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// Referenced classes of package com.dukascopy.charts.data.datacache:
//            LoadProgressingAction, LoadDataAction, DataCacheException, CurvesDataLoader, 
//            LoadingProgressListener, FeedDataProvider, ChunkLoadingListener

class LoadInCacheAction extends LoadProgressingAction
    implements Runnable
{

    public LoadInCacheAction(FeedDataProvider feedDataProvider, Instrument instrument, Period period, OfferSide side, long from, long to, LoadingProgressListener loadingProgress, StackTraceElement stackTrace[], CurvesDataLoader.IntraperiodExistsPolicy intraperiodExistsPolicy, boolean loadFromChunkStart, ChunkLoadingListener chunkLoadingListener)
        throws DataCacheException
    {
        super(loadingProgress);
        this.instrument = instrument;
        this.period = period;
        this.side = side;
        this.from = from;
        this.to = to;
        this.chunkLoadingListener = chunkLoadingListener;
        this.stackTrace = stackTrace;
        this.feedDataProvider = feedDataProvider;
        this.intraperiodExistsPolicy = intraperiodExistsPolicy;
        this.loadFromChunkStart = loadFromChunkStart;
    }

    public void run()
    {
        if(loadingProgress.stopJob())
        {
            loadingProgress.loadingFinished(false, from, to, to, null);
            return;
        }
        CurvesDataLoader curvesDataLoader = feedDataProvider.getCurvesDataLoader();
        curvesDataLoader.loadInCache(instrument, period, side, from, to, loadingProgress, intraperiodExistsPolicy, loadFromChunkStart, chunkLoadingListener);
        if(loadingProgress.stopJob())
        {
            loadingProgress.loadingFinished(false, from, to, to, null);
            return;
        }
        if(loadingProgress.stopJob())
        {
            loadingProgress.loadingFinished(false, from, to, to, null);
            return;
        }
        try
        {
            loadingProgress.dataLoaded(from, to, to, "Data loaded!");
            loadingProgress.loadingFinished(true, from, to, to, null);
        }
        catch(Exception e)
        {
            LOGGER.error(e.getMessage(), e);
            loadingProgress.loadingFinished(false, from, to, from, e);
        }
        catch(Throwable t)
        {
            LOGGER.error(t.getMessage(), t);
            loadingProgress.loadingFinished(false, from, to, from, null);
        }
        return;
    }

    private static SimpleDateFormat formatter;
    private static final Logger LOGGER = LoggerFactory.getLogger(com/dukascopy/charts/data/datacache/LoadDataAction);
    private final Instrument instrument;
    private final Period period;
    private final OfferSide side;
    private final long from;
    private final long to;
    private final StackTraceElement stackTrace[];
    private final FeedDataProvider feedDataProvider;
    private final CurvesDataLoader.IntraperiodExistsPolicy intraperiodExistsPolicy;
    private final boolean loadFromChunkStart;
    private final ChunkLoadingListener chunkLoadingListener;

    static 
    {
        formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSZ");
        formatter.setTimeZone(TimeZone.getTimeZone("GMT 0"));
    }
}
