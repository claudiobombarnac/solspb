// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LoadNumberOfPointAndFigureAction.java

package com.dukascopy.charts.data.datacache.pnf;

import com.dukascopy.api.*;
import com.dukascopy.charts.data.datacache.*;
import com.dukascopy.charts.data.datacache.priceaggregation.*;

// Referenced classes of package com.dukascopy.charts.data.datacache.pnf:
//            TickLiveFeedListenerForPointAndFigure, CandleLiveFeedListenerForPointAndFigure, PointAndFigureCreator, IPointAndFigureLiveFeedListener, 
//            PointAndFigureData

public class LoadNumberOfPointAndFigureAction extends AbstractLoadNumberOfPriceAggregationAction
{

    public LoadNumberOfPointAndFigureAction(FeedDataProvider feedDataProvider, Instrument instrument, OfferSide offerSide, int beforeTimeCandlesCount, long time, int afterTimeCandlesCount, 
            PriceRange priceRange, ReversalAmount reversalAmount, IPointAndFigureLiveFeedListener liveFeedListener, LoadingProgressListener loadingProgressListener, com.dukascopy.charts.data.datacache.CurvesDataLoader.IntraperiodExistsPolicy intraperiodExistsPolicy)
    {
        super(instrument, offerSide, beforeTimeCandlesCount, time, afterTimeCandlesCount, feedDataProvider, liveFeedListener, loadingProgressListener, intraperiodExistsPolicy);
        this.reversalAmount = reversalAmount;
        this.priceRange = priceRange;
        validateToTime(time);
    }

    protected AbstractPriceAggregationLiveFeedListener createLiveFeedListener(PointAndFigureCreator creator, long lastPossibleTime)
    {
        if(Period.TICK.equals(getBarsBasedOnCandlesPeriod()))
            return new TickLiveFeedListenerForPointAndFigure(creator);
        else
            return new CandleLiveFeedListenerForPointAndFigure(creator, lastPossibleTime);
    }

    protected PointAndFigureCreator createPriceAggregationCreator(long startTime, int rangeBarsCount, boolean liveCreation, boolean forwardCreation)
    {
        return new PointAndFigureCreator((double)getPriceRange().getPipCount() * getInstrument().getPipValue(), getReversalAmount().getAmount(), rangeBarsCount, forwardCreation, getOfferSide(), liveCreation, (IPointAndFigureLiveFeedListener)getPriceAggregationLiveFeedListener());
    }

    protected LoadDataAction createLoadDataAction(long fromTime, long toTime, LiveFeedListener liveFeedListener, LoadingProgressListener loadingProgressListener)
        throws DataCacheException
    {
        LoadDataAction loadDataAction;
        if(Period.TICK.equals(getBarsBasedOnCandlesPeriod()))
            loadDataAction = new LoadDataAction(getFeedDataProvider(), getInstrument(), fromTime, toTime, liveFeedListener, loadingProgressListener, null, false, getIntraperiodExistsPolicy(), false);
        else
            loadDataAction = new LoadDataAction(getFeedDataProvider(), getInstrument(), getBarsBasedOnCandlesPeriod(), getOfferSide(), fromTime, toTime, liveFeedListener, loadingProgressListener, null, false, getIntraperiodExistsPolicy(), false);
        return loadDataAction;
    }

    protected PointAndFigureData[] createArray(int size)
    {
        return new PointAndFigureData[size];
    }

    public ReversalAmount getReversalAmount()
    {
        return reversalAmount;
    }

    protected PointAndFigureData getInProgressBar()
    {
        return getFeedDataProvider().getInProgressPointAndFigure(getInstrument(), getOfferSide(), getPriceRange(), getReversalAmount());
    }

    public PriceRange getPriceRange()
    {
        return priceRange;
    }

    protected Period getBarsBasedOnCandlesPeriod()
    {
        return getSuitablePeriod(getPriceRange().getPipCount(), getReversalAmount().getAmount());
    }

    public String toString()
    {
        return (new StringBuilder()).append(getInstrument()).append(" ").append(getBarsBasedOnCandlesPeriod()).append(" ").append(getOfferSide()).append(" ").append(getPriceRange()).append(" ").append(getReversalAmount()).toString();
    }

    protected boolean isInProgressBarLoadingNow()
    {
        return getFeedDataProvider().isInProgressPointAndFigureLoadingNow(getInstrument(), getOfferSide(), getPriceRange(), getReversalAmount());
    }

    protected volatile AbstractPriceAggregationData getInProgressBar()
    {
        return getInProgressBar();
    }

    protected volatile AbstractPriceAggregationLiveFeedListener createLiveFeedListener(IPriceAggregationCreator x0, long x1)
    {
        return createLiveFeedListener((PointAndFigureCreator)x0, x1);
    }

    protected volatile AbstractPriceAggregationData[] createArray(int x0)
    {
        return createArray(x0);
    }

    protected volatile IPriceAggregationCreator createPriceAggregationCreator(long x0, int x1, boolean x2, boolean x3)
    {
        return createPriceAggregationCreator(x0, x1, x2, x3);
    }

    private final ReversalAmount reversalAmount;
    private final PriceRange priceRange;
}
