// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AbstractPriceAggregationCreator.java

package com.dukascopy.charts.data.datacache.priceaggregation;

import com.dukascopy.dds2.greed.agent.strategy.StratUtils;
import java.text.SimpleDateFormat;
import java.util.*;

// Referenced classes of package com.dukascopy.charts.data.datacache.priceaggregation:
//            IPriceAggregationLiveFeedListener, IPriceAggregationCreator, AbstractPriceAggregationData

public abstract class AbstractPriceAggregationCreator
    implements IPriceAggregationCreator
{

    public AbstractPriceAggregationCreator(int desiredBarsCount)
    {
        this(null, desiredBarsCount);
    }

    public AbstractPriceAggregationCreator(IPriceAggregationLiveFeedListener listener, int desiredBarsCount)
    {
        priceAggregationLiveFeedListener = new ArrayList();
        this.desiredBarsCount = desiredBarsCount;
        if(listener != null)
            addListener(listener);
    }

    protected List getPriceRangeLiveFeedListeners()
    {
        return priceAggregationLiveFeedListener;
    }

    public void addListener(IPriceAggregationLiveFeedListener listener)
    {
        getPriceRangeLiveFeedListeners().add(listener);
    }

    public void removeListener(IPriceAggregationLiveFeedListener listener)
    {
        getPriceRangeLiveFeedListeners().remove(listener);
    }

    public boolean contains(IPriceAggregationLiveFeedListener listener)
    {
        return getPriceRangeLiveFeedListeners().contains(listener);
    }

    public void fireNewBarCreated(AbstractPriceAggregationData data)
    {
        lastFiredData = data;
        IPriceAggregationLiveFeedListener listener;
        for(Iterator i$ = getPriceRangeLiveFeedListeners().iterator(); i$.hasNext(); listener.newPriceData(data))
            listener = (IPriceAggregationLiveFeedListener)i$.next();

    }

    public AbstractPriceAggregationData getFirstData()
    {
        if(getLastElementIndex() > -1)
            return getResult()[0];
        else
            return null;
    }

    public AbstractPriceAggregationData getLastData()
    {
        if(getResult() != null && getLastElementIndex() > -1 && getLastElementIndex() < getResult().length)
            return getResult()[getLastElementIndex()];
        else
            return null;
    }

    public AbstractPriceAggregationData[] getResult()
    {
        return result;
    }

    public int getLastElementIndex()
    {
        return lastElementIndex;
    }

    public int getDesiredDatasCount()
    {
        return desiredBarsCount;
    }

    public int getLoadedElementsNumber()
    {
        return getLastElementIndex() + 1;
    }

    protected double round(double value)
    {
        return StratUtils.round(value, 10);
    }

    public AbstractPriceAggregationData getLastFiredData()
    {
        return lastFiredData;
    }

    protected static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS") {

            
            {
                setTimeZone(TimeZone.getTimeZone("GMT 0"));
            }
    };
    private List priceAggregationLiveFeedListener;
    protected AbstractPriceAggregationData result[];
    protected int lastElementIndex;
    private final int desiredBarsCount;
    private AbstractPriceAggregationData lastFiredData;

}
