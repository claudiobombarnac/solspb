// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LoadNumberOfPriceRangeAction.java

package com.dukascopy.charts.data.datacache.rangebar;

import com.dukascopy.api.*;
import com.dukascopy.charts.data.datacache.*;
import com.dukascopy.charts.data.datacache.priceaggregation.*;

// Referenced classes of package com.dukascopy.charts.data.datacache.rangebar:
//            PriceRangeCreator, IPriceRangeLiveFeedListener, PriceRangeData, TickLiveFeedListenerForRangeBars, 
//            CandleLiveFeedListenerForRangeBars

public class LoadNumberOfPriceRangeAction extends AbstractLoadNumberOfPriceAggregationAction
{

    public LoadNumberOfPriceRangeAction(Instrument instrument, OfferSide offerSide, int numberOfPriceRangesBefore, long time, int numberOfPriceRangesAfter, PriceRange priceRange, 
            FeedDataProvider feedDataProvider, IPriceRangeLiveFeedListener priceRangeLiveFeedListener, LoadingProgressListener loadingProgressListener, com.dukascopy.charts.data.datacache.CurvesDataLoader.IntraperiodExistsPolicy intraperiodExistsPolicy)
    {
        super(instrument, offerSide, numberOfPriceRangesBefore, time, numberOfPriceRangesAfter, feedDataProvider, priceRangeLiveFeedListener, loadingProgressListener, intraperiodExistsPolicy);
        this.priceRange = priceRange;
        validateToTime(time);
    }

    protected PriceRangeCreator createPriceAggregationCreator(long startTime, int rangeBarsCount, boolean livePriceRangesCreation, boolean forwardCreation)
    {
        return new PriceRangeCreator(getInstrument(), getOfferSide(), rangeBarsCount, getPriceRange(), !forwardCreation, (IPriceRangeLiveFeedListener)getPriceAggregationLiveFeedListener(), livePriceRangesCreation);
    }

    protected PriceRangeData[] createArray(int size)
    {
        return new PriceRangeData[size];
    }

    protected AbstractPriceAggregationLiveFeedListener createLiveFeedListener(PriceRangeCreator creator, long lastPossibleTime)
    {
        if(Period.TICK.equals(getBarsBasedOnCandlesPeriod()))
            return new TickLiveFeedListenerForRangeBars(creator);
        else
            return new CandleLiveFeedListenerForRangeBars(creator, lastPossibleTime);
    }

    protected LoadDataAction createLoadDataAction(long fromTime, long toTime, LiveFeedListener liveFeedListener, LoadingProgressListener loadingProgressListener)
        throws DataCacheException
    {
        LoadDataAction loadDataAction;
        if(Period.TICK.equals(getBarsBasedOnCandlesPeriod()))
            loadDataAction = new LoadDataAction(getFeedDataProvider(), getInstrument(), fromTime, toTime, liveFeedListener, loadingProgressListener, null, false, getIntraperiodExistsPolicy(), false);
        else
            loadDataAction = new LoadDataAction(getFeedDataProvider(), getInstrument(), getBarsBasedOnCandlesPeriod(), getOfferSide(), fromTime, toTime, liveFeedListener, loadingProgressListener, null, false, getIntraperiodExistsPolicy(), false);
        return loadDataAction;
    }

    protected PriceRangeData getInProgressBar()
    {
        return getFeedDataProvider().getInProgressPriceRange(getInstrument(), getOfferSide(), getPriceRange());
    }

    public PriceRange getPriceRange()
    {
        return priceRange;
    }

    protected Period getBarsBasedOnCandlesPeriod()
    {
        return getSuitablePeriod(getPriceRange().getPipCount());
    }

    public String toString()
    {
        return (new StringBuilder()).append(getInstrument()).append(" ").append(getBarsBasedOnCandlesPeriod()).append(" ").append(getOfferSide()).append(" ").append(getPriceRange()).toString();
    }

    protected boolean isInProgressBarLoadingNow()
    {
        return getFeedDataProvider().isInProgressPriceRangeLoadingNow(getInstrument(), getOfferSide(), getPriceRange());
    }

    protected volatile AbstractPriceAggregationData getInProgressBar()
    {
        return getInProgressBar();
    }

    protected volatile AbstractPriceAggregationLiveFeedListener createLiveFeedListener(IPriceAggregationCreator x0, long x1)
    {
        return createLiveFeedListener((PriceRangeCreator)x0, x1);
    }

    protected volatile AbstractPriceAggregationData[] createArray(int x0)
    {
        return createArray(x0);
    }

    protected volatile IPriceAggregationCreator createPriceAggregationCreator(long x0, int x1, boolean x2, boolean x3)
    {
        return createPriceAggregationCreator(x0, x1, x2, x3);
    }

    private final PriceRange priceRange;
}
