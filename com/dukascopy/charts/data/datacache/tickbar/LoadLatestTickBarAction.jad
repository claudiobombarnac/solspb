// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LoadLatestTickBarAction.java

package com.dukascopy.charts.data.datacache.tickbar;

import com.dukascopy.api.*;
import com.dukascopy.charts.data.datacache.*;
import com.dukascopy.charts.data.datacache.priceaggregation.AbstractPriceAggregationData;

// Referenced classes of package com.dukascopy.charts.data.datacache.tickbar:
//            LoadNumberOfTickBarAction, TickBarData, ITickBarLiveFeedListener

public class LoadLatestTickBarAction extends LoadNumberOfTickBarAction
{

    public LoadLatestTickBarAction(FeedDataProvider feedDataProvider, Instrument instrument, OfferSide offerSide, TickBarSize tickBarSize, ITickBarLiveFeedListener liveFeedListener, LoadingProgressListener loadingProgressListener, com.dukascopy.charts.data.datacache.CurvesDataLoader.IntraperiodExistsPolicy intraperiodExistsPolicy)
    {
        super(instrument, offerSide, 1, 0x8000000000000000L, 1, tickBarSize, feedDataProvider, liveFeedListener, loadingProgressListener, intraperiodExistsPolicy);
    }

    protected long getToTime()
    {
        return getFeedDataProvider().getLatestKnownTimeOrCurrentGMTTime(getInstrument());
    }

    protected TickBarData[] extractRequestedBars(TickBarData target[])
    {
        TickBarData lastBar = (TickBarData)extractLastBar(target);
        if(lastBar == null)
            return null;
        else
            return (new TickBarData[] {
                lastBar
            });
    }

    protected long updateToTime(long toTime)
    {
        return getFeedDataProvider().getLatestKnownTimeOrCurrentGMTTime(getInstrument());
    }

    protected long getLastKnownTime()
    {
        return getToTime();
    }

    protected boolean inProgressBarExists()
    {
        return true;
    }

    protected volatile AbstractPriceAggregationData[] extractRequestedBars(AbstractPriceAggregationData x0[])
    {
        return extractRequestedBars((TickBarData[])x0);
    }
}
