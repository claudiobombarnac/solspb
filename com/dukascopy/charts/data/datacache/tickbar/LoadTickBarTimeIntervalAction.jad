// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   LoadTickBarTimeIntervalAction.java

package com.dukascopy.charts.data.datacache.tickbar;

import com.dukascopy.api.*;
import com.dukascopy.charts.data.datacache.*;
import com.dukascopy.charts.data.datacache.priceaggregation.*;

// Referenced classes of package com.dukascopy.charts.data.datacache.tickbar:
//            TickBarData, TickLiveFeedListenerForTickBar, TickBarCreator, ITickBarLiveFeedListener

public class LoadTickBarTimeIntervalAction extends AbstractLoadPriceAggregationByTimeRangeAction
{

    public LoadTickBarTimeIntervalAction(Instrument instrument, OfferSide offerSide, TickBarSize tickBarSize, long fromTime, long toTime, 
            FeedDataProvider feedDataProvider, ITickBarLiveFeedListener liveFeedListener, LoadingProgressListener loadingProgressListener, com.dukascopy.charts.data.datacache.CurvesDataLoader.IntraperiodExistsPolicy intraperiodExistsPolicy)
    {
        super(instrument, offerSide, fromTime, toTime, feedDataProvider, liveFeedListener, loadingProgressListener, intraperiodExistsPolicy);
        this.tickBarSize = tickBarSize;
        validateFromToTime(fromTime, toTime);
    }

    public TickBarSize getTickBarSize()
    {
        return tickBarSize;
    }

    protected TickBarData[] createArray(int size)
    {
        return new TickBarData[size];
    }

    protected AbstractPriceAggregationLiveFeedListener createLiveFeedListener(TickBarCreator creator, long lastPossibleTime)
    {
        return new TickLiveFeedListenerForTickBar(creator);
    }

    protected TickBarCreator createPriceAggregationCreator(long startTime, int rangeBarsCount, boolean liveCreation, boolean directOrder)
    {
        return new TickBarCreator(rangeBarsCount, getTickBarSize().getSize(), getOfferSide(), directOrder, liveCreation, (ITickBarLiveFeedListener)getPriceAggregationLiveFeedListener());
    }

    protected TickBarData getInProgressBar()
    {
        return getFeedDataProvider().getInProgressTickBar(getInstrument(), getOfferSide(), getTickBarSize());
    }

    protected Period getBarsBasedOnCandlesPeriod()
    {
        return Period.TICK;
    }

    protected LoadDataAction createLoadDataAction(long fromTime, long toTime, LiveFeedListener liveFeedListener, LoadingProgressListener loadingProgressListener)
        throws DataCacheException
    {
        LoadDataAction loadDataAction = new LoadDataAction(getFeedDataProvider(), getInstrument(), fromTime, toTime, liveFeedListener, loadingProgressListener, null, false, getIntraperiodExistsPolicy(), false);
        return loadDataAction;
    }

    public String toString()
    {
        return (new StringBuilder()).append(getInstrument()).append(" ").append(getBarsBasedOnCandlesPeriod()).append(" ").append(getOfferSide()).append(" ").append(getTickBarSize()).toString();
    }

    protected boolean isInProgressBarLoadingNow()
    {
        return getFeedDataProvider().isInProgressTickBarLoadingNow(getInstrument(), getOfferSide(), getTickBarSize());
    }

    protected volatile AbstractPriceAggregationData getInProgressBar()
    {
        return getInProgressBar();
    }

    protected volatile AbstractPriceAggregationLiveFeedListener createLiveFeedListener(IPriceAggregationCreator x0, long x1)
    {
        return createLiveFeedListener((TickBarCreator)x0, x1);
    }

    protected volatile AbstractPriceAggregationData[] createArray(int x0)
    {
        return createArray(x0);
    }

    protected volatile IPriceAggregationCreator createPriceAggregationCreator(long x0, int x1, boolean x2, boolean x3)
    {
        return createPriceAggregationCreator(x0, x1, x2, x3);
    }

    private final TickBarSize tickBarSize;
}
