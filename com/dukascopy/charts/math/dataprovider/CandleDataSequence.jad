// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CandleDataSequence.java

package com.dukascopy.charts.math.dataprovider;

import com.dukascopy.api.Period;
import com.dukascopy.charts.data.datacache.CandleData;
import java.util.Map;

// Referenced classes of package com.dukascopy.charts.math.dataprovider:
//            AbstractDataSequence

public class CandleDataSequence extends AbstractDataSequence
{

    public CandleDataSequence(Period period, long from, long to, int extraBefore, int extraAfter, 
            CandleData data[], long gaps[][], Map formulaOutputs, Map indicators, boolean latestDataVisible, boolean includesLatestData)
    {
        super(period, from, to, extraBefore, extraAfter, data, gaps, formulaOutputs, indicators, latestDataVisible, includesLatestData);
        calculateMinMax();
    }

    public void calculateMasterDataMinMax()
    {
        if(((CandleData[])data).length == 0)
            return;
        int minMaxIndexStart = extraBefore <= 0 ? 0 : extraBefore - 1;
        int minMaxIndexEnd = ((CandleData[])data).length - (extraAfter <= 0 ? 0 : extraAfter - 1);
        min = ((CandleData[])data)[minMaxIndexStart].low;
        max = ((CandleData[])data)[minMaxIndexStart].high;
        for(int i = minMaxIndexStart; i < minMaxIndexEnd; i++)
        {
            CandleData curChartsCandle = ((CandleData[])data)[i];
            double high = curChartsCandle.high;
            double low = curChartsCandle.low;
            max = max <= high ? high : max;
            min = min <= low ? min : low;
        }

        if(max != min)
        {
            return;
        } else
        {
            max++;
            return;
        }
    }
}
