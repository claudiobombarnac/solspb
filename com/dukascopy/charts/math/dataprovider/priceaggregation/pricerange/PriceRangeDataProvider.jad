// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   PriceRangeDataProvider.java

package com.dukascopy.charts.math.dataprovider.priceaggregation.pricerange;

import com.dukascopy.api.*;
import com.dukascopy.charts.data.datacache.DataCacheException;
import com.dukascopy.charts.data.datacache.IFeedDataProvider;
import com.dukascopy.charts.data.datacache.priceaggregation.*;
import com.dukascopy.charts.data.datacache.rangebar.*;
import com.dukascopy.charts.math.dataprovider.AbstractDataProvider;
import com.dukascopy.charts.math.dataprovider.priceaggregation.AbstractPriceAggregationDataProvider;
import com.dukascopy.charts.math.dataprovider.priceaggregation.AbstractPriceAggregationDataSequence;
import java.util.Map;
import org.slf4j.Logger;

// Referenced classes of package com.dukascopy.charts.math.dataprovider.priceaggregation.pricerange:
//            PriceRangeDataSequence

public class PriceRangeDataProvider extends AbstractPriceAggregationDataProvider
{

    public PriceRangeDataProvider(Instrument instrument, OfferSide side, PriceRange priceRange, int maxNumberOfCandles, int bufferSizeMultiplier, long lastTime, 
            Filter filter, IFeedDataProvider feedDataProvider)
    {
        super(instrument, Period.TICK, side, maxNumberOfCandles, bufferSizeMultiplier, lastTime, filter, feedDataProvider);
        this.priceRange = priceRange;
        inProgressBarListener = new PriceRangeLiveFeedAdapter() {

            public void newPriceData(PriceRangeData priceRange)
            {
                inProgressBarUpdated(priceRange);
            }

            public volatile void newPriceData(AbstractPriceAggregationData x0)
            {
                newPriceData((PriceRangeData)x0);
            }

            final PriceRangeDataProvider this$0;

            
            {
                this$0 = PriceRangeDataProvider.this;
                super();
            }
        };
        latestBarNotificationListener = new PriceRangeLiveFeedAdapter() {

            public void newPriceData(PriceRangeData priceRange)
            {
                latestBarArrived(priceRange);
            }

            public volatile void newPriceData(AbstractPriceAggregationData x0)
            {
                newPriceData((PriceRangeData)x0);
            }

            final PriceRangeDataProvider this$0;

            
            {
                this$0 = PriceRangeDataProvider.this;
                super();
            }
        };
    }

    protected PriceRangeData[] createArray(int size)
    {
        return new PriceRangeData[size];
    }

    protected PriceRangeData[] createArray(PriceRangeData data)
    {
        PriceRangeData result[] = {
            data
        };
        return result;
    }

    protected PriceRangeDataSequence createDataSequence(long from, long to, int extraBefore, int extraAfter, PriceRangeData data[], 
            long gaps[][], Map formulaOutputs, Map indicators, boolean latestDataVisible, boolean includesLatestData)
    {
        return new PriceRangeDataSequence(from, to, extraBefore, extraAfter, data, gaps, formulaOutputs, indicators, latestDataVisible, includesLatestData);
    }

    protected IPriceRangeLiveFeedListener createPriceAggregationLiveFeedListener()
    {
        return new PriceRangeLiveFeedAdapter() {

            public void newPriceDatas(PriceRangeData priceRanges[], int loadedNumberBefore, int loadedNumberAfter)
            {
                historicalBarsArived(priceRanges);
            }

            public volatile void newPriceDatas(AbstractPriceAggregationData x0[], int x1, int x2)
            {
                newPriceDatas((PriceRangeData[])x0, x1, x2);
            }

            final PriceRangeDataProvider this$0;

            
            {
                this$0 = PriceRangeDataProvider.this;
                super();
            }
        };
    }

    protected void performDataLoad(int numOfCandlesBefore, long reqTime, int numOfCandlesAfter)
        throws DataCacheException
    {
        feedDataProvider.loadPriceRangeData(getInstrument(), getOfferSide(), numOfCandlesBefore, reqTime, numOfCandlesAfter, getPriceRange(), createPriceAggregationLiveFeedListener(), loadingProgressListener);
    }

    public void setPriceRange(PriceRange priceRange)
    {
        setParams(instrument, period, filter, side, priceRange);
    }

    public PriceRange getPriceRange()
    {
        return priceRange;
    }

    public void setInstrument(Instrument instrument)
    {
        setParams(instrument, period, filter, side, priceRange);
    }

    public void setOfferSide(OfferSide offerSide)
    {
        setParams(instrument, period, filter, offerSide, priceRange);
    }

    public void setParams(Instrument instrument, Period period, Filter filter, OfferSide offerSide, PriceRange priceRange)
    {
        if(LOGGER.isDebugEnabled())
            LOGGER.debug((new StringBuilder()).append("Setting filter ").append(filter).append(" for [").append(instrument).append("] [").append(period).append("] [").append(offerSide).append("] provider").toString());
        if(parentDataProvider != null)
            synchronized(parentDataProvider)
            {
                synchronized(this)
                {
                    synchronizeParams(instrument, period, filter, offerSide, priceRange);
                }
            }
        else
            synchronized(this)
            {
                synchronizeParams(instrument, period, filter, offerSide, priceRange);
            }
    }

    private boolean isAnyParameterChanged(Instrument instrument, Period period, Filter filter, OfferSide side, PriceRange priceRange)
    {
        return !this.period.equals(period) || !this.side.equals(side) || !this.filter.equals(filter) || !this.priceRange.equals(priceRange) || !this.instrument.equals(instrument);
    }

    private void synchronizeParams(Instrument instrument, Period period, Filter filter, OfferSide offerSide, PriceRange priceRange)
    {
        boolean isAnyParamChanged = isAnyParameterChanged(instrument, period, filter, offerSide, priceRange);
        this.priceRange = priceRange;
        super.synchronizeParams(instrument, period, filter, offerSide, isAnyParamChanged);
    }

    public void setPeriod(Period period1)
    {
    }

    public void setFilter(Filter filter1)
    {
    }

    protected void addInProgressBarListeners()
    {
        feedDataProvider.addInProgressPriceRangeListener(instrument, side, priceRange, (IPriceRangeLiveFeedListener)inProgressBarListener);
        feedDataProvider.addPriceRangeNotificationListener(instrument, side, priceRange, (IPriceRangeLiveFeedListener)latestBarNotificationListener);
    }

    protected void removeInProgressBarListeners()
    {
        feedDataProvider.removeInProgressPriceRangeListener((IPriceRangeLiveFeedListener)inProgressBarListener);
        feedDataProvider.removePriceRangeNotificationListener((IPriceRangeLiveFeedListener)latestBarNotificationListener);
    }

    protected long getMaxTimeIntervalBetweenTwoBars()
    {
        Period period = getBarsBasedOnCandlesPeriod();
        long result = 0L;
        if(Unit.Millisecond.equals(period.getUnit()) || Unit.Second.equals(period.getUnit()) || Unit.Minute.equals(period.getUnit()) || Period.TICK.equals(period))
            result = 60000L;
        else
            result = period.getInterval();
        result += result / 4L;
        return result;
    }

    protected PriceRangeData getInProgressBar()
    {
        PriceRangeData bar = feedDataProvider.getInProgressPriceRange(instrument, side, priceRange);
        return bar;
    }

    protected Period getBarsBasedOnCandlesPeriod()
    {
        return TimeDataUtils.getSuitablePeriod(getPriceRange());
    }

    protected volatile AbstractPriceAggregationDataSequence createDataSequence(long x0, long x1, int x2, int x3, AbstractPriceAggregationData x4[], 
            long x5[][], Map x6, Map x7, boolean x8, boolean x9)
    {
        return createDataSequence(x0, x1, x2, x3, (PriceRangeData[])x4, x5, x6, x7, x8, x9);
    }

    protected volatile AbstractPriceAggregationData getInProgressBar()
    {
        return getInProgressBar();
    }

    protected volatile AbstractPriceAggregationData[] createArray(AbstractPriceAggregationData x0)
    {
        return createArray((PriceRangeData)x0);
    }

    protected volatile AbstractPriceAggregationData[] createArray(int x0)
    {
        return createArray(x0);
    }

    protected IPriceAggregationCreator latestPriceAggregationCreator;
    private PriceRange priceRange;



}
