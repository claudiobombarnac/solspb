// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AESCript.java

package com.dukascopy.dds2.greed.agent.compiler;

import java.io.PrintStream;
import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// Referenced classes of package com.dukascopy.dds2.greed.agent.compiler:
//            Base32

class AESCript
{

    AESCript()
    {
    }

    public static void main(String args[])
    {
        try
        {
            byte key[] = key();
            byte enc[] = encript("".getBytes(), key);
            byte dec[] = decript(enc, key);
            System.out.println(new String(dec));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    public static String asHex(byte buf[])
    {
        StringBuffer strbuf = new StringBuffer(buf.length * 2);
        for(int i = 0; i < buf.length; i++)
        {
            if((buf[i] & 0xff) < 16)
                strbuf.append("0");
            strbuf.append(Long.toString(buf[i] & 0xff, 16));
        }

        return strbuf.toString();
    }

    public static byte[] key()
        throws Exception
    {
        KeyGenerator kgen = KeyGenerator.getInstance("AES");
        kgen.init(128);
        SecretKey skey = kgen.generateKey();
        return skey.getEncoded();
    }

    public static byte[] encript(byte forEnc[], byte key[])
        throws Exception
    {
        SecretKeySpec skeySpec = new SecretKeySpec(key, "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(1, skeySpec);
        return cipher.doFinal(forEnc);
    }

    public static byte[] decript(byte encrypted[], byte key[])
        throws GeneralSecurityException
    {
        Cipher cipher = Cipher.getInstance("AES");
        SecretKeySpec skeySpec = new SecretKeySpec(key, "AES");
        cipher.init(2, skeySpec);
        return cipher.doFinal(encrypted);
    }

    public static String digest(byte in[])
    {
        MessageDigest sha512 = null;
        try
        {
            sha512 = MessageDigest.getInstance("SHA-512");
        }
        catch(NoSuchAlgorithmException e)
        {
            LOGGER.error(e.getMessage(), e);
            return null;
        }
        sha512.update(in, 0, in.length);
        byte shadigest[] = sha512.digest();
        return Base32.encode(shadigest);
    }

    private static final Logger LOGGER = LoggerFactory.getLogger(com/dukascopy/dds2/greed/agent/compiler/AESCript);

}
