// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   StrategyRateDataNotificationFactory.java

package com.dukascopy.dds2.greed.agent.strategy.notification;

import com.dukascopy.api.IStrategy;
import com.dukascopy.charts.data.datacache.FeedDataProvider;
import com.dukascopy.dds2.greed.agent.strategy.notification.candle.IStrategyCandleNotificationManager;
import com.dukascopy.dds2.greed.agent.strategy.notification.candle.StrategyCandleNotificationManager;
import com.dukascopy.dds2.greed.agent.strategy.notification.pnf.IStrategyPointAndFigureNotificationManager;
import com.dukascopy.dds2.greed.agent.strategy.notification.pnf.StrategyPointAndFigureNotificationManager;
import com.dukascopy.dds2.greed.agent.strategy.notification.pr.IStrategyPriceRangeNotificationManager;
import com.dukascopy.dds2.greed.agent.strategy.notification.pr.StrategyPriceRangeNotificationManager;
import com.dukascopy.dds2.greed.agent.strategy.notification.tickbar.IStrategyTickBarNotificationManager;
import com.dukascopy.dds2.greed.agent.strategy.notification.tickbar.StrategyTickBarNotificationManager;

// Referenced classes of package com.dukascopy.dds2.greed.agent.strategy.notification:
//            IStrategyRateDataNotificationFactory

public class StrategyRateDataNotificationFactory
    implements IStrategyRateDataNotificationFactory
{

    private StrategyRateDataNotificationFactory()
    {
    }

    public static IStrategyRateDataNotificationFactory getIsntance()
    {
        if(isntance == null)
            isntance = new StrategyRateDataNotificationFactory();
        return isntance;
    }

    private FeedDataProvider getFeedDataProvider()
    {
        return feedDataProvider;
    }

    public void unsubscribeFromAll(IStrategy strategy)
    {
        getCandleNotificationManager().unsubscribeFromAll(strategy);
        getPriceRangeNotificationManager().unsubscribeFromAll(strategy);
        getPointAndFigureNotificationManager().unsubscribeFromAll(strategy);
        getTickBarNotificationManager().unsubscribeFromAll(strategy);
    }

    public IStrategyCandleNotificationManager getCandleNotificationManager()
    {
        if(candleNotificationManager == null)
            candleNotificationManager = new StrategyCandleNotificationManager(getFeedDataProvider());
        return candleNotificationManager;
    }

    public IStrategyPriceRangeNotificationManager getPriceRangeNotificationManager()
    {
        if(priceRangeNotificationManager == null)
            priceRangeNotificationManager = new StrategyPriceRangeNotificationManager(getFeedDataProvider());
        return priceRangeNotificationManager;
    }

    public IStrategyPointAndFigureNotificationManager getPointAndFigureNotificationManager()
    {
        if(pointAndFigureNotificationManager == null)
            pointAndFigureNotificationManager = new StrategyPointAndFigureNotificationManager(getFeedDataProvider());
        return pointAndFigureNotificationManager;
    }

    public IStrategyTickBarNotificationManager getTickBarNotificationManager()
    {
        if(tickBarNotificationManager == null)
            tickBarNotificationManager = new StrategyTickBarNotificationManager(getFeedDataProvider());
        return tickBarNotificationManager;
    }

    private static IStrategyRateDataNotificationFactory isntance;
    private IStrategyCandleNotificationManager candleNotificationManager;
    private IStrategyPriceRangeNotificationManager priceRangeNotificationManager;
    private IStrategyPointAndFigureNotificationManager pointAndFigureNotificationManager;
    private IStrategyTickBarNotificationManager tickBarNotificationManager;
    private final FeedDataProvider feedDataProvider = FeedDataProvider.getDefaultInstance();
}
