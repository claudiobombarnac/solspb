// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   TesterIndicators.java

package com.dukascopy.dds2.greed.agent.strategy.tester;

import com.dukascopy.api.*;
import com.dukascopy.api.impl.History;
import com.dukascopy.api.impl.Indicators;

// Referenced classes of package com.dukascopy.dds2.greed.agent.strategy.tester:
//            IStrategyRunner, ITesterReport

public class TesterIndicators extends Indicators
{

    public TesterIndicators(History history, IStrategyRunner strategyRunner)
    {
        super(history);
        this.strategyRunner = strategyRunner;
    }

    public Object[] calculateIndicator(Instrument instrument, Period period, OfferSide side[], String functionName, com.dukascopy.api.IIndicators.AppliedPrice inputTypes[], Object optParams[], int shift)
        throws JFException
    {
        long perfStatTimeStart = strategyRunner.perfStartTime();
        Object aobj[] = super.calculateIndicator(instrument, period, side, functionName, inputTypes, optParams, shift);
        strategyRunner.perfStopTime(perfStatTimeStart, ITesterReport.PerfStats.INDICATOR_CALLS);
        return aobj;
        Exception exception;
        exception;
        strategyRunner.perfStopTime(perfStatTimeStart, ITesterReport.PerfStats.INDICATOR_CALLS);
        throw exception;
    }

    public Object[] calculateIndicator(Instrument instrument, Period period, OfferSide side[], String functionName, com.dukascopy.api.IIndicators.AppliedPrice inputTypes[], Object optParams[], long from, long to)
        throws JFException
    {
        long perfStatTimeStart = strategyRunner.perfStartTime();
        Object aobj[] = super.calculateIndicator(instrument, period, side, functionName, inputTypes, optParams, from, to);
        strategyRunner.perfStopTime(perfStatTimeStart, ITesterReport.PerfStats.INDICATOR_CALLS);
        return aobj;
        Exception exception;
        exception;
        strategyRunner.perfStopTime(perfStatTimeStart, ITesterReport.PerfStats.INDICATOR_CALLS);
        throw exception;
    }

    public Object[] calculateIndicator(Instrument instrument, Period period, OfferSide side[], String functionName, com.dukascopy.api.IIndicators.AppliedPrice inputTypes[], Object optParams[], Filter filter, 
            int numberOfCandlesBefore, long time, int numberOfCandlesAfter)
        throws JFException
    {
        long perfStatTimeStart = strategyRunner.perfStartTime();
        Object aobj[] = super.calculateIndicator(instrument, period, side, functionName, inputTypes, optParams, filter, numberOfCandlesBefore, time, numberOfCandlesAfter);
        strategyRunner.perfStopTime(perfStatTimeStart, ITesterReport.PerfStats.INDICATOR_CALLS);
        return aobj;
        Exception exception;
        exception;
        strategyRunner.perfStopTime(perfStatTimeStart, ITesterReport.PerfStats.INDICATOR_CALLS);
        throw exception;
    }

    private IStrategyRunner strategyRunner;
}
