// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   CandleDataLoadingThread.java

package com.dukascopy.dds2.greed.agent.strategy.tester.dataload;

import com.dukascopy.api.*;
import com.dukascopy.api.impl.TimedData;
import com.dukascopy.charts.data.datacache.*;
import java.util.concurrent.BlockingQueue;
import org.slf4j.Logger;

// Referenced classes of package com.dukascopy.dds2.greed.agent.strategy.tester.dataload:
//            AbstractDataLoadingThread

public class CandleDataLoadingThread extends AbstractDataLoadingThread
{

    public CandleDataLoadingThread(String name, Instrument instrument, JForexPeriod jForexPeriod, OfferSide offerSide, BlockingQueue queue, long from, 
            long to, IFeedDataProvider feedDataProvider)
    {
        super(name, instrument, jForexPeriod, offerSide, queue, from, to, feedDataProvider);
    }

    public void run()
    {
        LiveFeedListener feedListener = new LiveFeedListener() {

            public void newCandle(Instrument instrument, Period period, OfferSide side, long time, double open, 
                    double close, double low, double high, double vol)
            {
                if(!isStop())
                    putDataToQueue(new IntraPeriodCandleData(false, time, open, close, low, high, vol));
            }

            public void newTick(Instrument instrument1, long l, double d, double d1, 
                    double d2, double d3)
            {
            }

            final CandleDataLoadingThread this$0;

            
            {
                this$0 = CandleDataLoadingThread.this;
                super();
            }
        };
        LoadingProgressListener loadingProgressListener = createLoadingProgressListener();
        Period period = getJForexPeriod().getPeriod();
        long firstCandle = DataCacheUtils.getCandleStartFast(period, getFrom());
        long lastCandle = DataCacheUtils.getPreviousCandleStartFast(period, DataCacheUtils.getCandleStartFast(period, getTo()));
        if(firstCandle <= lastCandle)
            try
            {
                getFeedDataProvider().loadCandlesDataBlockingSynched(getInstrument(), period, getOfferSide(), firstCandle, lastCandle, feedListener, loadingProgressListener);
            }
            catch(Throwable e)
            {
                LOGGER.error(e.getLocalizedMessage(), e);
            }
        else
            putDataToQueue(createEmptyBar());
    }

    protected IntraPeriodCandleData createEmptyBar()
    {
        return new IntraPeriodCandleData(true, 0x8000000000000000L, -1D, -1D, -1D, -1D, -1D);
    }

    protected volatile TimedData createEmptyBar()
    {
        return createEmptyBar();
    }
}
