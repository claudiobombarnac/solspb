// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   PriceRangeDataLoadingThread.java

package com.dukascopy.dds2.greed.agent.strategy.tester.dataload;

import com.dukascopy.api.Instrument;
import com.dukascopy.api.OfferSide;
import com.dukascopy.api.impl.TimedData;
import com.dukascopy.charts.data.datacache.IFeedDataProvider;
import com.dukascopy.charts.data.datacache.JForexPeriod;
import com.dukascopy.charts.data.datacache.priceaggregation.AbstractPriceAggregationData;
import com.dukascopy.charts.data.datacache.priceaggregation.IPriceAggregationLiveFeedListener;
import com.dukascopy.charts.data.datacache.rangebar.*;
import java.util.concurrent.BlockingQueue;

// Referenced classes of package com.dukascopy.dds2.greed.agent.strategy.tester.dataload:
//            AbstractPriceAggregationDataLoadingThread

public class PriceRangeDataLoadingThread extends AbstractPriceAggregationDataLoadingThread
{

    public PriceRangeDataLoadingThread(String name, Instrument instrument, JForexPeriod jForexPeriod, OfferSide offerSide, BlockingQueue queue, long from, 
            long to, IFeedDataProvider feedDataProvider)
    {
        super(name, instrument, jForexPeriod, offerSide, queue, from, to, feedDataProvider);
    }

    protected void executeRun()
    {
        IPriceRangeLiveFeedListener liveFeedListener = new PriceRangeLiveFeedAdapter() {

            public void newPriceData(PriceRangeData priceRange)
            {
                if(!isStop())
                    putDataToQueue(priceRange);
            }

            public volatile void newPriceData(AbstractPriceAggregationData x0)
            {
                newPriceData((PriceRangeData)x0);
            }

            final PriceRangeDataLoadingThread this$0;

            
            {
                this$0 = PriceRangeDataLoadingThread.this;
                super();
            }
        };
        com.dukascopy.charts.data.datacache.LoadingProgressListener progressListener = createLoadingProgressListener();
        long toTime = checkToTimeRightBound(getTo());
        getFeedDataProvider().loadPriceRangeTimeIntervalSynched(getInstrument(), getOfferSide(), getJForexPeriod().getPriceRange(), getFrom(), toTime, liveFeedListener, progressListener);
    }

    protected PriceRangeData createEmptyBar()
    {
        return new PriceRangeData(0x8000000000000000L, 0x8000000000000000L, -1D, -1D, -1D, -1D, -1D, -1L);
    }

    protected void addInProgressBarListener(IPriceRangeLiveFeedListener inProgressListener)
    {
        getFeedDataProvider().addInProgressPriceRangeListener(getInstrument(), getOfferSide(), getJForexPeriod().getPriceRange(), inProgressListener);
    }

    protected IPriceRangeLiveFeedListener createInProgressAdapter()
    {
        return new PriceRangeLiveFeedAdapter() {

            final PriceRangeDataLoadingThread this$0;

            
            {
                this$0 = PriceRangeDataLoadingThread.this;
                super();
            }
        };
    }

    protected PriceRangeData getInProgressBar()
    {
        return getFeedDataProvider().getInProgressPriceRange(getInstrument(), getOfferSide(), getJForexPeriod().getPriceRange());
    }

    protected boolean isInProgressBarLoadingNow()
    {
        return getFeedDataProvider().isInProgressPriceRangeLoadingNow(getInstrument(), getOfferSide(), getJForexPeriod().getPriceRange());
    }

    protected void removeInProgressBarListener(IPriceRangeLiveFeedListener inProgressListener)
    {
        getFeedDataProvider().removeInProgressPriceRangeListener(inProgressListener);
    }

    protected volatile IPriceAggregationLiveFeedListener createInProgressAdapter()
    {
        return createInProgressAdapter();
    }

    protected volatile void removeInProgressBarListener(IPriceAggregationLiveFeedListener x0)
    {
        removeInProgressBarListener((IPriceRangeLiveFeedListener)x0);
    }

    protected volatile void addInProgressBarListener(IPriceAggregationLiveFeedListener x0)
    {
        addInProgressBarListener((IPriceRangeLiveFeedListener)x0);
    }

    protected volatile AbstractPriceAggregationData getInProgressBar()
    {
        return getInProgressBar();
    }

    protected volatile TimedData createEmptyBar()
    {
        return createEmptyBar();
    }
}
