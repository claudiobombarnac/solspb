// Decompiled by Jad v1.5.8e2. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://kpdus.tripod.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   AnnotatedTableModel.java

package com.dukascopy.dds2.greed.gui.table;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.*;
import javax.swing.table.AbstractTableModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// Referenced classes of package com.dukascopy.dds2.greed.gui.table:
//            ColumnDescriptor

public abstract class AnnotatedTableModel extends AbstractTableModel
{

    public AnnotatedTableModel(Class columnBeanClass, Class infoClass)
    {
        Field arr$[] = columnBeanClass.getFields();
        int len$ = arr$.length;
        for(int i$ = 0; i$ < len$; i$++)
        {
            Field field = arr$[i$];
            ColumnDescriptor columnDescriptor = (ColumnDescriptor)field.getAnnotation(com/dukascopy/dds2/greed/gui/table/ColumnDescriptor);
            if(columnDescriptor == null)
                throw new IllegalArgumentException((new StringBuilder()).append(field).append(" don't annoted by ").append(com/dukascopy/dds2/greed/gui/table/ColumnDescriptor).toString());
            columnDescriptors.add(columnDescriptor);
        }

        columnBeanValues = (Enum[])columnBeanClass.getEnumConstants();
        try
        {
            columnBeanValueGetter = columnBeanClass.getMethod("getValue", new Class[] {
                columnBeanClass, infoClass
            });
            columnBeanValueGetter.setAccessible(true);
        }
        catch(Exception e)
        {
            throw new IllegalArgumentException((new StringBuilder()).append(columnBeanClass).append(" don't declare getValue(").append(columnBeanClass.getSimpleName()).append(",").append(infoClass.getSimpleName()).append(") method").toString());
        }
    }

    public String getColumnName(int columnIndex)
    {
        return getColumnDescriptor(columnIndex).title();
    }

    public final Class getColumnClass(int columnIndex)
    {
        return getColumnDescriptor(columnIndex).contentClass();
    }

    public final int getColumnCount()
    {
        return columnDescriptors.size();
    }

    public int getRowCount()
    {
        return rowData.size();
    }

    public final Object getValueAt(int rowIndex, int columnIndex)
    {
        if(getRowCount() > 0)
            return getValue(columnIndex, rowData.get(rowIndex));
        else
            return null;
    }

    public boolean isCellEditable(int rowIndex, int columnIndex)
    {
        return false;
    }

    public final void addAll(Object infos[], int fromIndex, int toIndex)
    {
        if(infos == null)
            throw new IllegalArgumentException("Infos is empty");
        if(infos.length <= 0)
            return;
        if(fromIndex > toIndex || toIndex > infos.length - 1)
            throw new IllegalArgumentException("Incorrect indecies passed!");
        for(int i = fromIndex; i <= toIndex; i++)
        {
            Object info = infos[i];
            addNoFire(info);
        }

        doFireTableRowsInserted(0, toIndex - fromIndex);
    }

    public final void addAll(Object infos[])
    {
        addAll(infos, 0, infos.length - 1);
    }

    private final void addNoFire(Object info)
    {
        if(info == null)
        {
            throw new IllegalArgumentException("Info is empty");
        } else
        {
            rowData.add(0, info);
            return;
        }
    }

    private final void doFireTableRowsInserted(int firstRow, int lastRow)
    {
        try
        {
            fireTableRowsInserted(firstRow, lastRow);
        }
        catch(Exception ex)
        {
            LOGGER.warn((new StringBuilder()).append("Error while updating table : ").append(firstRow).append("/").append(lastRow).append(" @ ").append(getRowCount()).toString(), ex);
        }
    }

    public final void add(Object info)
    {
        addNoFire(info);
        doFireTableRowsInserted(0, 0);
    }

    public final void update(int index, Object info)
    {
        rowData.set(index, info);
        fireTableRowsUpdated(index, index);
    }

    public final Object get(int index)
    {
        return rowData.get(index);
    }

    public final void remove(int index)
    {
        rowData.remove(index);
        fireTableRowsDeleted(index, index);
    }

    public final void clear()
    {
        try
        {
            rowData.clear();
            fireTableDataChanged();
        }
        catch(Exception ex)
        {
            LOGGER.error(ex.getMessage(), ex);
        }
    }

    private Object getValue(int columnIndex, Object info)
    {
        return columnBeanValueGetter.invoke(null, new Object[] {
            columnBeanValues[columnIndex], info
        });
        Exception ex;
        ex;
        LOGGER.error(ex.getMessage(), ex);
        throw new RuntimeException(ex);
    }

    public ColumnDescriptor getColumnDescriptor(int columnIndex)
    {
        return (ColumnDescriptor)columnDescriptors.get(columnIndex);
    }

    public final void refresh()
    {
        fireTableRowsUpdated(0, getRowCount());
    }

    private static final Logger LOGGER = LoggerFactory.getLogger(com/dukascopy/dds2/greed/gui/table/AnnotatedTableModel);
    private static final String METHOD_NAME = "getValue";
    private final List columnDescriptors = new ArrayList();
    private final Enum columnBeanValues[];
    private final Method columnBeanValueGetter;
    private final List rowData = Collections.synchronizedList(new Vector());

}
